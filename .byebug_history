exit
@pros
{n=>pp[1][n]}
{n=>o[1][n]}
puts n
@id
c
@pros
params[:is].join(' ').split(' ').uniq
c
Product.where(:id.in=>params[:is].join(' ').split(' ').uniq).to_a
Product.where(:id.in=>params[:is].join(' ').split(' ').uniq)
params[:is].join(' ').split(' ').uniq
params[:is].join(' ').split(' ')
params[:is]
exit
c
@id.flatten.uniq
@id.flatten
@id
c
params[:is].join(" ").split(" ").uniq.count
params[:is].join(" ").split(" ").uniq
params[:is].join(" ").split(" ")
params[:is].join(" ")
params[:is].flatten.count
params[:is].flatten
params[:is].count
params[:is]
params
exit
@id
c
@pros.collect{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.clear
@a
@pros.each{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.clear
@a
@pros.collect{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.clear
@pros.collect{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@pros.map{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.count
@a
@pros.collect{|o| o[0]}.count
@pros.collect{|o| o[0]}
@a
@pros.map{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a=[]
@pros.map{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a
@pros.select{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@pros.select{|o| @a << o[0] o[1].to_a.include?({n=>o[1][n]}.flatten)}
@a=[]
@a
@pros.select{|o| @a << o[1].to_a.include?({n=>o[1][n]}.flatten)}
@a=[]
@pros.select{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.each{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.map{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.collect{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.select{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.select{|o| o[1].to_a.include?({n=>o[1][n]}.flatten.shift)}
pp[1].to_a.include?({n=>pp[1][n]}.flatten)
pp[1].flatten.include?({n=>pp[1][n]}.)
pp[1].flatten.include?({n=>pp[1][n]}.flatten)
pp[1].to_a.include?({n=>pp[1][n]}.flatten)
{n=>pp[1][n]}.flatten
pp[1].to_a.include?({n=>pp[1][n]}.)
{n=>pp[1][n]}.to_a
pp[1].to_a.include?({n=>pp[1][n]}.to_a)
pp[1].to_a.include?({n=>pp[1][n]})
pp[1].to_a
pp[1].include?({@a})
pp[1].include?(@a)
pp[1]
@a={n=>pp[1][n]}
{n=>pp[1][n]}
pp[1].include?({n=>pp[1][n]})
pp[1].include??({n.to_sym=>pp[1][n]})
pp[1].include??({n.to_syb=>pp[1][n]})
pp[1].include??({n=>pp[1][n]})
pp[1].invert[n=>pp[1][n]]
[n=>pp[1][n]]
{n=>pp[1][n]}
puts n
n
pp[1].key?({n=>pp[1][n]})
pp[1].key({n=>pp[1][n]})
pp[1].has_value?(pp[1][n])
pp[1].hash_value?(pp[1][n])
pp[1].include?(pp[1][n])
pp[1][n]
pp
@pros[0]
@pros
@pros.collect{|i| i.include?(pp[0]=>pp[1][n])}
@pros.collect{|i| i.include?(pp[1][n])}
pp[1][n]
pp[1]
@pros
pp
exit
Manufacture.where(:id=>BSON::ObjectId.from_string(Product.where(:id=>p.id).pluck(:manu_id)[0])).pluck(i.to_sym)[0]
c
Taxon.where(:id.in=>@product1.pluck(:taxon_id).uniq[0]).to_a
Taxon.where(:id.in=>@product1.pluck(:taxon_id).uniq).to_a
Taxon.where(:id=>@product1.pluck(:taxon_id).uniq).to_a
Taxon.where(:id=>@product1.pluck(:taxon_id).uniq)
@product1.pluck(:taxon_id).uniq
@product1.pluck(:taxon_id)
@product1.to_a
@product1
@main_cat_name.to_a
@main_cat_name
c
params
params[:is]
c
params.include?("is")
params
exit
pp[1][n]
pp[1]
pp[0]
pp
@pros
c
@property.to_a
@property
@pros
pp
c
$main_cat_name[0].id
$main_cat_name[0].pluck(:id)
$main_cat_name[0]
$main_cat_name.flatten
$main_cat_name.to_a
$main_cat_name
c
$main_cat_name
$taxo
exit
$taxo
c
@tax=Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta)).to_a
@tax=Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta))
Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta)).to_a
Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta))
@ta
exit
Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta)).to_a
Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta))
@ta
c
@taxo
c
@product1.to_a
@product1
params[:format]
@ta
c
Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta)).to_a
Taxonomy.where(:id=>BSON::ObjectId.from_string(@ta))
@ta
c
@taxo[0]
@taxo
puts i.flatten@taxo
puts i.flatten
puts i
puts i.pluck(:id)
puts i
i.id
c
@taxo.map{|i| Taxon.where(:id=>i.id).present?}
@taxo
Taxonomy.where(:id=>i.id).to_a
Taxon.where(:id=>i.id).to_a
Taxon.where(:id=>i.id).present?
Taxon.where(:id=>i.id).present/
i.id
puts i
c
$taxon_main.(:parent_id=>BSON::ObjectId.from_string(@taxon_id))
@taxon_id
$taxon_main.exi(:parent_id=>BSON::ObjectId.from_string(@taxon_id))@taxon_id
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).any?
$taxon_main.exists(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).to_a
$taxon_main.exists(:parent_id=>BSON::ObjectId.from_string(@taxon_id))
$taxon_main.exist(:parent_id=>BSON::ObjectId.from_string(@taxon_id))
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).blank?
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).to_a
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).tp_a
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id))
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).to_a
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id))
$taxon_main.blank?
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).present? 
$taxon_main.blank? || $taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).present? 
@taxon
@taxon.flatten
@taxon.to_a
@taxon
@ta
c
exit
puts i.id
puts i
exit
$taxo.flatten.reverse
$taxo.flatten
$taxo
@taxo.flattenexit
@taxo.to_a
@taxo.flatten
@taxo
@taxo.map{|i| puts i.class}
@taxo.map{|i| puts i.flatten}
@taxo.map{|i| puts i.id}
@taxo.map{|i| puts i.to_a}
@taxo.each{|i| puts i.to_a}
@taxo.each {|i| puts i.flatten}
@taxo.each {|i| puts i.to_a}
@taxo.each {|i| puts i}
@taxo.each {|i| puts i.id}
@taxo.each {|i| puts i}
@taxo
c
@taxo.flattenc
@taxo.flatten
@taxo
c
@taxon.to_a
@taxon
@ta
Taxonomy.where(:parent_id=>BSON::ObjectId.from_string(@ta))
c
$taxon_main.blank?
$taxon_main.blank
$taxon_main.to_a
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id)).to_a
$taxon_main.where(:parent_id=>BSON::ObjectId.from_string(@taxon_id))
@main_cat_name.to_a
@main_cat_name
@taxon_id
@ta
c
Taxonomy.where(:id=>BSON::ObjectId.from_string(@taxon_id)).to_a
Taxonomy.where(:taxon_id=>BSON::ObjectId.from_string(@taxon_id)).to_a
Taxonomy.where(:taxon_id=>BSON::ObjectId.from_string(@taxon_id))
Taxonomy.where(:taxon_id=>BSON::ObjectId.from_string(@taxon_id)).pluck(:id)[0]
Taxon.where(:id=>Taxonomy.where(:taxon_id=>BSON::ObjectId.from_string(@taxon_id)).pluck(:id)[0])
Taxon.where(:id=>Taxonomy.where(:taxon_id=>BSON::ObjectId.from_string(BSON::ObjectId.from_string(@taxon_id)).pluck(:id)[0]))
Taxon.where(:id=>Taxonomy.where(:taxon_id=>BSON::ObjectId.from_string(@taxon_id)).pluck(:id)[0])
