exit
7*50/400
7*50/200
7*50/100
File.open(file.tempfile,"r").collect{|p| p.chomp.split("\t")}
exit
@q1 == @q2
@q2=@file[110]
@q1=@fff[110].join(",").split("\t")
@file[110]
@fff[110].join(",").split("\t")
@fff[110].join(",")
@fff[110].join
@fff[110].join.split("\t")
@fff[110].split("\t")
@fff[10][0].split("\t")
@fff[110][0].split("\t")
@fff[110].split("\t")
@fff[110]
@fff[0]
@fff=CSV.read(file.tempfile,:quote_char => ",")
@fff=CSV.read(file.tempfile,:quote_char => "|")
 @file = File.open(file.tempfile,"r").collect{|o| o.chomp.split("\t")}
c
CSV.foreach(file.tempfile){|p| next if rescueException=>e  puts p}
CSV.foreach(file.tempfile){|p| next if rescueException=> e  puts p}
CSV.foreach(file.tempfile){|p| next if rescue Exception=> e  puts p}
CSV.foreach(file.tempfile){|p| next if Exception puts p}
CSV.foreach(file.tempfile){|p| next if Exception }
CSV.foreach(file.tempfile){|p| next if rescue Exception}
CSV.foreach(file.tempfile){|p| puts p.split("\t")}
CSV.foreach(file.tempfile){|p| puts p.split(",")}
CSV.foreach(file.tempfile){|p| puts p.split}
CSV.foreach(file.tempfile){|p| Exception }
CSV.foreach(file.tempfile){|p| rescue }
CSV.foreach(file.tempfile){|p| rescue Exception => e }
CSV.foreach(file.tempfile){|p| puts p.split}
CSV.parse_line(file.tempfile){|p| puts p.split}
f.collect{|p| p.split("\t")}
f.collect{|p| p.split("\t")
f[0]
f=File.open(file.tempfile, "r:bom|utf-8",:quote_char => "|")
f[5957]
f[555]
f[5]
f[0]
f=File.open(file.tempfile, "r:bom|utf-8",:quote_char => ",").collect{|p| p.chomp.split("\t")}
f=File.open(file.tempfile, "r:bom|utf-8",:quote_char => ",")
f=File.open(file.tempfile, "r:bom|utf-8",:quote_char => "|")
f=File.open(file.tempfile, "r:bom|utf-8")
f=File.open(file.tempfile, "r:bom|utf-8");
f=File.open(file.tempfile, "r:bom|utf-8"); data = SmarterCSV.process(f); f.close
File.open(file.tempfile, "r:bom|utf-8"); data = SmarterCSV.process(f); f.close
CSV.parse_line(file.tempfile){|p| puts p.split}
CSV.parse_line(file.tempfile){|p| puts p}
CSV.parseline(file.tempfile){|p| puts p}
@fff=CSV.read(file.tempfile)
@fff=CSV.read(file.tempfile,:quote_char => ",|")
@fff=CSV.read(file.tempfile,:quote_char => "|" || ",")
@fff=CSV.read(file.tempfile,:quote_char => "|")
@fff=CSV.read(file.tempfile,:quote_char => "," || "|")
@fff=CSV.read(file.tempfile,:quote_char => ",")
@fff=CSV.read(file.tempfile,:quote_char => "\t")
@fff=CSV.read(file.tempfile,:quote_char => "\")
@fff=CSV.read(file.tempfile)
@fff=CSV.read(file.tempfile,:quote_char => "|")
exit
@fff=CSV.read(file.tempfile,:quote_char => "|")
@fff=CSV.read(file.tempfile,)
file
file.tempfile
tempfile
@fff=CSV.read(file.tempfile,:quote_char => "|").flatten.collect{|p| p.split("\t")}
@fff=CSV.read(file.tempfile)
File.open(file.tempfile,"r").collect{|p| p.chomp.split(',')}
File.open(file.tempfile,"r").collect{|p| p.chomp.split('\t') || p.chomp.split(',')}
File.open(file.tempfile,"r").collect{|p| p.chomp}[0]
File.open(file.tempfile,"r").collect{|p| p.chomp}
File.open(file.tempfile,"r")
exit
@ml
exit
@ml=@file[0].index("M Logo")
line[@ml]
@ml=@file[0].index("M Number")
@file[0].index("M Number")
@file[0]
@ml
line[@ml]
line[@mn]
line
Manufacture.where(:manu_name=>line[@mn]).to_a
Manufacture.where(:manu_name=>line[@mn])
c
File.open(file.tempfile,"r").collect{|p| p.chomp.split("\t")}
File.open(file.tempfile,"r").collect{|p| p.chomp}[0].split("\t")
File.open(file.tempfile,"r").collect{|p| p.chomp}
File.open(file.tempfile,"r").collect|p| p.chomp}
File.open(file.tempfile,"r")
file.tempfile
exit
Product.where(:taxon_id=>BSON::ObjectId.from_string(Taxonomy.where(:_id=>i.id).pluck(:taxon_id)[0]))
Taxonomy.where(:_id=>i.id).pluck(:taxon_id)
Taxonomy.where(:_id=>i.id).pluck(:taxon_id))
Product.where(:taxon_id=>BSON::ObjectId.from_string(Taxonomy.where(:_id=>i.id).pluck(:taxon_id))).to_a
Product.where(:taxon_id=>Taxonomy.where(:_id=>i.id).pluck(:taxon_id)).to_a
Product.where(:taxon_id=>Taxonomy.where(:_id=>i.id).pluck(:taxon_id))
Product.where(:taxon_id=>Taxonomy.where(:_id=>i.id)).pluck(:taxon_id))
Product.where(:taxon_id=>i.id).to_a
Product.where(:taxonomy_id=>i.id).to_a
Product.where(:taxonomy_id=>i.id)
i.id
exit
Product.count
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).count
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).count
Product.count
c
Product.count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).count
Product.count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.count
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).to_a
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn])
exit
Product.count
c
Product.count
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.count
c
Product.count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.count
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).to_a
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
c
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).delete
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).to_a
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).present?
exit
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).count
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn]).to_a
Product.where(:manu_id=>@man).where(:mp_number=>line[@mpn])
exit
 @attribute_data1 = @attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| {p[0]=>p[1..-1].compact.join('  ')} }
@attribute_data = @attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0],p[1..-1].compact.join('  ')]}
@attri_data=line[@attrstartloc..-1].each_slice(3).to_a
@attribute_data
line[@attrstartloc..-1].each_slice(3).to_a
@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0],p[1..-1].compact.join('  ')]}
c
@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0],p[1..-1].compact.join('  ')]}
line[@attrstartloc..-1].each_slice(3).to_a
line[@attrstartloc..-1]
@attri_data
@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| {p[0]=>p[1..-1].compact.join('  ')} }
exit
@pros
{n=>pp[1][n]}
{n=>o[1][n]}
puts n
@id
c
@pros
params[:is].join(' ').split(' ').uniq
c
Product.where(:id.in=>params[:is].join(' ').split(' ').uniq).to_a
Product.where(:id.in=>params[:is].join(' ').split(' ').uniq)
params[:is].join(' ').split(' ').uniq
params[:is].join(' ').split(' ')
params[:is]
exit
c
@id.flatten.uniq
@id.flatten
@id
c
params[:is].join(" ").split(" ").uniq.count
params[:is].join(" ").split(" ").uniq
params[:is].join(" ").split(" ")
params[:is].join(" ")
params[:is].flatten.count
params[:is].flatten
params[:is].count
params[:is]
params
exit
@id
c
@pros.collect{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.clear
@a
@pros.each{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.clear
@a
@pros.collect{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.clear
@pros.collect{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@pros.map{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a.count
@a
@pros.collect{|o| o[0]}.count
@pros.collect{|o| o[0]}
@a
@pros.map{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a=[]
@pros.map{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@a
@pros.select{|o| @a << o[0] if o[1].to_a.include?({n=>o[1][n]}.flatten )}
@pros.select{|o| @a << o[0] o[1].to_a.include?({n=>o[1][n]}.flatten)}
@a=[]
@a
@pros.select{|o| @a << o[1].to_a.include?({n=>o[1][n]}.flatten)}
@a=[]
@pros.select{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.each{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.map{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.collect{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.select{|o| o[1].to_a.include?({n=>o[1][n]}.flatten)}
@pros.select{|o| o[1].to_a.include?({n=>o[1][n]}.flatten.shift)}
pp[1].to_a.include?({n=>pp[1][n]}.flatten)
pp[1].flatten.include?({n=>pp[1][n]}.)
pp[1].flatten.include?({n=>pp[1][n]}.flatten)
pp[1].to_a.include?({n=>pp[1][n]}.flatten)
{n=>pp[1][n]}.flatten
pp[1].to_a.include?({n=>pp[1][n]}.)
{n=>pp[1][n]}.to_a
pp[1].to_a.include?({n=>pp[1][n]}.to_a)
pp[1].to_a.include?({n=>pp[1][n]})
pp[1].to_a
pp[1].include?({@a})
pp[1].include?(@a)
pp[1]
@a={n=>pp[1][n]}
{n=>pp[1][n]}
pp[1].include?({n=>pp[1][n]})
pp[1].include??({n.to_sym=>pp[1][n]})
pp[1].include??({n.to_syb=>pp[1][n]})
pp[1].include??({n=>pp[1][n]})
